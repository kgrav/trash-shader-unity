#pragma kernel NihilismSingleChannel // operates on th4 green channel only 
#pragma kernel TrashcoreUnfuzz

RWTexture2D<float4> Result; // used by all, write-only
Texture2D<float4> Input; 	// used by all
Texture2D<float4> Chroma; 	// used only in the output shader, TrashcoreUnfuzz
Texture2D<float4> Fuzz; 	// used only in the output shader, TrashcoreUnfuzz
int nihilism_block_size; 	// used by all
int input_mip_level; 		// only encoder
int input_size_x; 			// both encoder and decoder
int input_size_y; 			// both encoder and decoder
int chroma_size_x; 			//  				decoder only
int chroma_size_y; 			//  				decoder only
int cronch;
int output_size_x; 			// 					decoder only 
int output_size_y; 			// 					decoder only
int theory; 				// 					decoder only, TrashcoreUnfuzz

// assert in cpu-side script that result.width * nihilism_block_size == input.width 
// assert in cpu-side script that result.height * nihilism_block_size == input.height

// each worker thread will read each pixel in the block to find:
//    - the brightest pixel (value) and uv coordinates in pixels relative to block origin
//    - the darkest pixel (value) and uv coordinates in pixels relative to block origin

// upon completion of reading all values in the block
//    - posterize the brightest and darkest pixel values
//    - hash uv coordinates to int and cast to float

// finally store the four floats to the fuzz texture and then get lost, scram kid

[numthreads(8,8,1)]
void NihilismSingleChannel (uint3 id : SV_DispatchThreadID)
{	
	// the size of the fuzz output pixels is not necessarily divisible by 8. cull if we're out of bounds 
	if (id.x >= uint(output_size_x) || id.y >= uint(output_size_y)) return;

	// input coordinate is the pixel coordinate in the input texture
	uint block_rank = uint(id.y);
	uint block_size = uint(4); // we always use 4x4 blocks

	
	int offset_x = (block_rank % 2) * (block_size / 2);
	
	int3 block_origin = input_mip_level 
					  * int3(id.x * block_size + offset_x,
							 id.y * block_size,
							 0);
	
	// create values to record locations of brightest and darkest pixels
	float shadow_value = 1.0;
	float bright_value = 0.0;
	int2 shadow_uv = int2(block_size - 1, block_size);
	int2 bright_uv = int2(0, 0);
	bool found_bright = false;
	bool found_shadow = false;
	float sum_green = 0.0;

	// Clamp input_mip_level to a value between 0 and 7 inclusive
	int clamped_mip_level = clamp(input_mip_level, 0, 7);

	for (uint u = 0; u < block_size; u++)
	{
		int input_x = block_origin.x + u * input_mip_level;
		//if (input_x >= input_size_x) input_x -= input_size_x; // <----- WRAP ------<<
		for (uint v = 0; v < block_size; v++)
		{
			int3 input_pixel = int3(input_x, block_origin.y + int(v) * input_mip_level, 0);
			
			float r = 1.0 / float(block_size);
			float4 input_value = float4 (r, r, r, 1.0);

			// The Load command (URP12 at least) requires a literal value for mipmap level
			// so we can't use the prettier form "Input.Load(input_pixel, clamped_mip_level)"
			switch(clamped_mip_level) {
				case 0: input_value = Input.Load(input_pixel, 0); break;
				case 1: input_value = Input.Load(input_pixel, 1); break;
				case 2: input_value = Input.Load(input_pixel, 2); break;
				case 3: input_value = Input.Load(input_pixel, 3); break;
				case 4: input_value = Input.Load(input_pixel, 4); break;
				case 5: input_value = Input.Load(input_pixel, 5); break;
				case 6: input_value = Input.Load(input_pixel, 6); break;
				case 7: input_value = Input.Load(input_pixel, 7); break;
				default:
					break;
			}			
			
			float we_only_care_about_green = input_value.g;
			sum_green += we_only_care_about_green;
			if (we_only_care_about_green > bright_value)
			{
				bright_value = we_only_care_about_green;
				bright_uv = int2(u, v);
				found_bright = true;
			}
			else if (we_only_care_about_green < shadow_value)
			{
				shadow_value = we_only_care_about_green;
				shadow_uv = int2(u, v);
				found_shadow = true;
			}
		}
	}

	if (!found_bright) bright_value = sum_green / float(block_size * block_size);
	if (!found_shadow) shadow_value = sum_green / float(block_size * block_size);

	float bright_to_shadow_distance = length(float2(bright_uv - shadow_uv));

	if (bright_to_shadow_distance < 2.0) // <----- CLAMP ------<<
	{
		bright_uv = int2(0, 0);
		shadow_uv = int2(block_size, block_size);
	}
	// posterizing the fuzz brightness wasn't very interesting
	// float posterize_levels = 1.0 + fuzzy_ruff;
	// float posterized_bright_value = floor(bright_value * posterize_levels) / posterize_levels;
	// float posterized_shadow_value = floor(shadow_value * posterize_levels) / posterize_levels;
	float bright_uv_f = float(bright_uv.x + bright_uv.y * nihilism_block_size);
	float shadow_uv_f = float(shadow_uv.x + shadow_uv.y * nihilism_block_size);
	
	Result[id.xy] = float4(bright_value,
							bright_uv_f,
							shadow_value,
							shadow_uv_f);
}

int2 uv_f_to_int2(float uv_f, uint block_size)
{
	uint uv = int(round(uv_f));
	int u = uv % 4;
	int v = uv / 4;
	return (1 + block_size) * int2(u, v);
}


[numthreads(8,8,1)]
void TrashcoreUnfuzz (uint3 id : SV_DispatchThreadID)
{
	// dont read dimensions of texture since the compute shaders only write part of them
    int chroma_x = id.x * chroma_size_x / output_size_x;
    int chroma_y = id.y * chroma_size_y / output_size_y;
    float4 chroma = Chroma.Load(int3(chroma_x, chroma_y, 0));
    /////////////////// ABOVE is copied from TrashcoreOutput  ////////////////////
	//////////////////////////////////////////////////////////////////////////////

	const uint block_size_input = 4 * nihilism_block_size;  // NBS is the same as m_fuzz
	uint block_rank = uint(id.y / block_size_input); // row id
	int offset_x = (2 * nihilism_block_size) * (block_rank % 2);
	uint x = max(0.0, id.x - offset_x);
	
	uint block_index_x = x / block_size_input;
	uint block_index_y = id.y / block_size_input;
	float4 fuzz_value = Fuzz.Load(int3(block_index_x, block_index_y, 0));

	float bright_value = fuzz_value.x;
	float bright_uv_f = fuzz_value.y;
	float shadow_value = fuzz_value.z;
	float shadow_uv_f = fuzz_value.w;

	int2 bright_uv = uv_f_to_int2(bright_uv_f, nihilism_block_size);
	int2 shadow_uv = uv_f_to_int2(shadow_uv_f, nihilism_block_size);


	int2 this_uv = int2(x % block_size_input, id.y % block_size_input);

	// Calculate the distance between bright_uv and shadow_uv
	float2 shadow_to_bright = float2(bright_uv - shadow_uv);
	float2 this_to_bright = float2(this_uv - bright_uv);
	float2 shadow_to_this = float2(this_uv - shadow_uv);

	// shadow_uv and bright_uv distance is guaranteed to be greater than zero by the encoder logic
	float gradient_length = length(shadow_to_bright);
	float distance_to_bright = length(this_to_bright);
	float distance_to_shadow = length(shadow_to_this);
	
	float block_size_scalar = 36.0 / float(block_size_input);

	float t_raw = 0.0;
	float gradient_factor = 0.0;
	switch (theory)
	{
		case 3: // crunch ultimÃª
			t_raw = 0.0;
			break;
		case 2:  // velvet dumpster overture
			gradient_factor = 1.0 - pow(abs(dot(normalize(shadow_to_this), normalize(shadow_to_bright))), 2.3);
			t_raw = gradient_factor * (0.8 + 0.2 * sin(distance_to_bright * 3.14159));
			break;
		case 1: // ants dance trance perhaps
			t_raw = 1.0 - 4.0 / float(nihilism_block_size) * distance_to_shadow / gradient_length;
			break;
		default: // woven pixel symphony
			t_raw = 1.0 - dot(normalize(shadow_to_this), normalize(shadow_to_bright));
			break;
	}
	float y = lerp(bright_value, shadow_value, clamp(t_raw, 0.0, 1.0));
	//float y = chroma.g;

	//////////////////////////////////////////////////////////////////////////////
	////////////////// REMAINDER is copied from TrashcoreOutput  /////////////////
	float cb = chroma.b;
    float cr = chroma.r;

    float r = y + 1.402 * (cr - 0.5);
    float g = y - 0.344136 * (cr - 0.5) - 0.714136 * (cb - 0.5);
    float b = y + 1.772 * (cb - 0.5);

    Result[id.xy] = float4(r, g, b, 1.0);
}