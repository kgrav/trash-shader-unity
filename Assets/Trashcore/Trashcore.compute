#pragma kernel TrashcoreYCbCr
#pragma kernel TrashcoreCronch
#pragma kernel TrashcoreDct
#pragma kernel TrashcoreCrunch
#pragma kernel TrashcoreIdct
#pragma kernel TrashcoreOutput

// Create a RenderTexture with enableRandomWrite flag and set it
RWTexture2D<float4> Result;
Texture2D<float4> Input;
SamplerState samplerInput; // auto-gemerated by unity if name is texture plus "sampler" prefix 
Texture2D<float4> Luma; // used only in the output shader
Texture2D<float4> Chroma; // used only in the output shader

float Resolution_x;
float Resolution_y;
float crunch_levels;
int juice;

float4 RGBToYCbCr(float4 rgba)
{
    float Y  = 0.299 * rgba.r + 0.587 * rgba.g + 0.114 * rgba.b;
    float Cb = (rgba.b - Y) * 0.564 + 0.5;
    float Cr = (rgba.r - Y) * 0.713 + 0.5;
    return float4(Cr, Y, Cb, 1.0); // not typical order but is closest to rgb while debugging
}

[numthreads(8,8,1)]
void TrashcoreYCbCr (uint3 id : SV_DispatchThreadID)
{
    float x = id.x / Resolution_x;
    float y = id.y / Resolution_y;
    float4 inputColor = Input.SampleLevel(samplerInput, float2(x, y), 0);
    Result[id.xy] = RGBToYCbCr(inputColor);
}

[numthreads(8,8,1)]
void TrashcoreCronch (uint3 id : SV_DispatchThreadID)
{
    float4 tap_00 = Input.Load(int3(    2 * id.x,     2 * id.y, 0));
    float4 tap_01 = Input.Load(int3(1 + 2 * id.x,     2 * id.y, 0));
    float4 tap_02 = Input.Load(int3(    2 * id.x, 1 + 2 * id.y, 0));
    float4 tap_03 = Input.Load(int3(1 + 2 * id.x, 1 + 2 * id.y, 0));
    Result[id.xy] = 0.25 * (tap_00 + tap_01 + tap_02 + tap_03);
}

[numthreads(8,8,1)]
void TrashcoreDct (uint3 id : SV_DispatchThreadID)
{
    int frequency_limit = 6 + juice;
    // id.x and y represent the DCT block indices (not pixels!)
    int2 dct_origin = int2(id.x * 8, id.y * 8);
    for (int s = 0; s < frequency_limit; s++) // s and t are in frequency space (output)
    {
        for (int t = 0; t < frequency_limit; t++)
        {
            float4 sum = 0.0;
            for (int u = 0; u < 8; u++)  // u and v are in texture space (input
            {
                for (int v = 0; v < 8; v++)
                {
                    float4 pixelValue = Input.Load(int3(dct_origin.x + u, dct_origin.y + v, 0));
                    float cos_x = cos(((2 * u + 1) * s * 3.14159265359) / 16.0);
                    float cos_y = cos(((2 * v + 1) * t * 3.14159265359) / 16.0);
                    sum += pixelValue * cos_x * cos_y;
                }
            }
            float C_s = (s == 0) ? sqrt(0.5) : 1.0;
            float C_t = (t == 0) ? sqrt(0.5) : 1.0;
            sum.w = 1.0;
            Result[int2(dct_origin.x + s, dct_origin.y + t)] = 0.25 * C_s * C_t * sum;
        }
    }
}

[numthreads(8,8,1)]
void TrashcoreCrunch (uint3 id : SV_DispatchThreadID)
{
    float4 inputValue = Input.Load(int3(id.x, id.y, 0));

    // Reduce total number of posterization levels as one gets further from DCT block origin
    int2 dct_offset = int2(id.x % 8, id.y % 8);
    float manhattanDistance = dct_offset.x + dct_offset.y; // oh yeah cuz we nasty like that
    float t = max(0.0, (manhattanDistance - 5.0)) / (16.0 - 5.0);
    //float frequency_falloff = lerp(1.0, 4.0, t);
    float frequency_falloff = 1.0;
    // actual jpeg compression uses a different formula but lets exeriment a little
    Result[id.xy] = floor(inputValue * crunch_levels / frequency_falloff) / crunch_levels * frequency_falloff;
}

[numthreads(8,8,1)]
void TrashcoreIdct (uint3 id : SV_DispatchThreadID)
{
    // id.x and id.y represent the IDCT block indices (not pixels!)
    int2 idct_origin = int2(id.x * 8, id.y * 8);
    float4 sum = float4(0.0, 0.0, 0.0, 1.0);
    float4 tap0 = float4(0.0, 0.0, 0.0, 1.0);
    float4 tap1 = float4(0.0, 0.0, 0.0, 1.0);
    int frequency_limit = 6 + juice;
    
    for (int u = 0; u < 8; u++) // u and v are in texture space (output)
    {
        for (int v = 0; v < 8; v++)
        {
            float4 result = float4(0.0, 0.0, 0.0, 1.0);
            for (int s = 0; s < frequency_limit; s++) // s and t are in frequency space (input)
            {
                for (int t = 0; t < frequency_limit; t++)
                {
                    float4 crunchedCoeficient = Input.Load(int3(idct_origin.x + s, idct_origin.y + t, 0));
                    float cos_x = cos(((2 * u + 1) * s * 3.14159265359) / 16.0);
                    float cos_y = cos(((2 * v + 1) * t * 3.14159265359) / 16.0);
                    float C_s = (s == 0) ? sqrt(0.5) : 1.0;
                    float C_t = (t == 0) ? sqrt(0.5) : 1.0;
                    // IDCT formula
                    result += crunchedCoeficient * cos_x * cos_y * C_s * C_t;
                }
            }
            // scale the result by 0.25 (per IDCT formula)
            result *= 0.25;
            // write the IDCT value to the output texture
            Result[int2(idct_origin.x + u, idct_origin.y + v)] = result;
            // setup for the bandaid fix
            if (u == 1 && v == 1) { tap0 = result; }
            if (u == 7 && v == 7) { tap1 = result; }
        }
    }
    // bandaid fix. the first pixel looks very green for some reason.
    // find the three adjacent pixels on the opposite corner of the post idct transform
    Result[int2(idct_origin.x, idct_origin.y)] = 0.35 * tap0 + 0.65 * tap1;
}

[numthreads(8,8,1)]
void TrashcoreOutput (uint3 id : SV_DispatchThreadID)
{
    int chroma_x = id.x * int(Resolution_x) / 1024;
    int chroma_y = id.y * int(Resolution_y) / 512;
    float4 chroma = Chroma.Load(int3(chroma_x, chroma_y, 0));
    float4 luma = Luma.Load(int3(id.xy, 0));
    
    float y = luma.y; // ycbcr is encoded in cr, y, cb order in rgb space 
    float cb = chroma.b;
    float cr = chroma.r;

    float r = y + 1.402 * (cr - 0.5);
    float g = y - 0.344136 * (cr - 0.5) - 0.714136 * (cb - 0.5);
    float b = y + 1.772 * (cb - 0.5);
    Result[id.xy] = float4(r, g, b, 1.0);
}